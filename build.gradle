/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4/userguide/tutorial_java_projects.html
 */
plugins {
	id 'com.moowork.node' version '1.2.0'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.moowork.node'

/* -----------------------------------------------------------------------------
 *  Configuration Section
 */

mainClassName = 'org.viduus.charon.minesweeper.GameRunner'
sourceCompatibility = 11
targetCompatibility = 11

project.ext.applicationOwner = 'Viduus'
project.ext.applicationProdId = 8
project.ext.applicationBetaId = 7
project.ext.projectVersion = '0.0.1'

node {
	version = '10.9.0'
	npmVersion = '6.2.0'
	download = true
}

/* -----------------------------------------------------------------------------
 *  Setup Section
 */

// Account for operating system
import org.gradle.internal.os.OperatingSystem
switch ( OperatingSystem.current() ) {
	case OperatingSystem.WINDOWS:
		break
	case OperatingSystem.LINUX:
	case OperatingSystem.MAC_OS:
		applicationDefaultJvmArgs = ["-XstartOnFirstThread"]
		break
}

applicationDefaultJvmArgs << "-Dapplication.name=${rootProject.name}"
applicationDefaultJvmArgs << "-Dapplication.owner=${applicationOwner}"

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
		}
		resources {
			srcDirs = ['src/main/resources']
		}
	}
}

/* -----------------------------------------------------------------------------
 *  Task Section
 */

jar {
	baseName = "${rootProject.name}.jar"
	version = "${project.ext.projectVersion}"
}

// When exporting project make sure command line arguments are correct
startScripts {
	doLast {
		// compute new JVM args
		def unixJvmArgs = applicationDefaultJvmArgs.collect()
		def winJvmArgs = applicationDefaultJvmArgs.collect()

		winJvmArgs.remove('-XstartOnFirstThread')

		def unixJvmArgsString = unixJvmArgs.collect{"\"$it\""}.join(' ')
		def winJvmArgsString = winJvmArgs.collect{"\"$it\""}.join(' ')

		// normalize if deploying from mac
		unixScript.text = unixScript.text.replaceFirst('DEFAULT_JVM_OPTS=.*', 'DEFAULT_JVM_OPTS=')
		windowsScript.text = windowsScript.text.replaceFirst('DEFAULT_JVM_OPTS=.*', 'DEFAULT_JVM_OPTS=')

		// add arguments again
		unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=', "DEFAULT_JVM_OPTS='${unixJvmArgsString}'")
		windowsScript.text = windowsScript.text.replace('DEFAULT_JVM_OPTS=', "DEFAULT_JVM_OPTS=${winJvmArgsString}")
	}
}

/* -----------------------------------------------------------------------------
 *  Dependency Section
 */

project.ext.lwjglVersion = "3.1.1"
project.ext.steamworks4jVersion = "1.6.1"
project.ext.jomlVersion = "1.9.2"

repositories {
	jcenter()
}

allprojects {
	applicationDistribution.from("${project.projectDir}/files/resources") {
		into "resources"
		include "**"
	}
	applicationDistribution.from("${project.projectDir}/src/main/resources") {
		into "resources"
		include "**"
	}
}

dependencies {
	// The production code uses the SLF4J logging API at compile time
	compile 'org.slf4j:slf4j-api:1.7.21'

	// Declare the dependency for your favourite test framework you want to use in your tests.
	// TestNG is also supported by the Gradle Test task. Just change the
	// testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
	// 'test.useTestNG()' to your build script.
	testCompile 'junit:junit:4.12'

	// Charon Engine
	compile project(':charon-engine')
}
